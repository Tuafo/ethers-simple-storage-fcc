const ethers = require("ethers")
const fs = require("fs")
require("dotenv").config()

async function main() {
    // compile them in our code
    // compile them separately
    // http://127.0.0.1:7545
    // https://ethereum.github.io/execution-apis/api-documentation/
    const provider = new ethers.providers.JsonRpcProvider(process.env.RPC_URL) // connection to the blockchain

    const wallet = new ethers.Wallet(process.env.PRIVATE_KEY, provider) // set up a wallet

    // const encryptJson = fs.readFileSync("./.encryptedJsonKey.json", "utf8");
    // let wallet = await ethers.Wallet.fromEncryptedJsonSync(
    // encryptJson,
    // process.env.PRIVATE_KEY_PASSWORD
    // );
    // wallet = await wallet.connect(provider);

    const abi = fs.readFileSync("./SimpleStorage_sol_SimpleStorage.abi", "utf8")
    const binary = fs.readFileSync(
        "./SimpleStorage_sol_SimpleStorage.bin",
        "utf8",
    )

    const contractFactory = new ethers.ContractFactory(abi, binary, wallet) // create a contract factory
    console.log("Deploying contract...")
    const contract = await contractFactory.deploy() // deploy the contract. STOP here!: wait for the contract to be deployed
    await contract.deployTransaction.wait(1)
    console.log(`Contract deployed to: ${contract.address}`)

    // Get Number
    const currentFavoriteNumber = await contract.retrieve()
    console.log(`Current Favorite Number: ${currentFavoriteNumber.toString()}`)
    const transactionResponse = await contract.Store(13)
    const transactionReceipt = await transactionResponse.wait(1)
    const updatedFavoriteNumber = await contract.retrieve()
    console.log(`Updated Favorite Number: ${updatedFavoriteNumber.toString()}`)

    // const transctionReceipt = await contract.deployTransaction.wait(1);
    // console.log(transctionReceipt);

    // console.log("Let's deploy with only transaction data!");
    // const nonce = await wallet.getTransactionCount(); // get the nonce
    // const tx = {
    //   nonce: nonce,
    //   gasPrice: 2000000000,
    //   gasLimit: 1000000,
    //   to: null,
    //   value: 0,
    //   data: "0x608060405234801561000f575f80fd5b5061092c8061001d5f395ff3fe608060405234801561000f575f80fd5b5060043610610060575f3560e01c80632e64cec1146100645780634f2be91f1461008257806369404ebd146100a05780636f760f41146100bc5780638bab8dd5146100d85780639e7a13ad14610108575b5f80fd5b61006c610139565b60405161007991906102d9565b60405180910390f35b61008a610141565b60405161009791906102d9565b60405180910390f35b6100ba60048036038101906100b5919061032d565b610149565b005b6100d660048036038101906100d19190610494565b61015b565b005b6100f260048036038101906100ed91906104ee565b6101df565b6040516100ff91906102d9565b60405180910390f35b610122600480360381019061011d919061032d565b61020c565b6040516101309291906105af565b60405180910390f35b5f8054905090565b5f6002905090565b805f81905550610157610139565b5050565b6002604051806040016040528083815260200184815250908060018154018082558091505060019003905f5260205f2090600202015f909190919091505f820151815f015560208201518160010190816101b591906107d7565b505050806001836040516101c991906108e0565b9081526020016040518091039020819055505050565b6001818051602081018201805184825260208301602085012081835280955050505050505f915090505481565b6002818154811061021b575f80fd5b905f5260205f2090600202015f91509050805f0154908060010180546102409061060a565b80601f016020809104026020016040519081016040528092919081815260200182805461026c9061060a565b80156102b75780601f1061028e576101008083540402835291602001916102b7565b820191905f5260205f20905b81548152906001019060200180831161029a57829003601f168201915b5050505050905082565b5f819050919050565b6102d3816102c1565b82525050565b5f6020820190506102ec5f8301846102ca565b92915050565b5f604051905090565b5f80fd5b5f80fd5b61030c816102c1565b8114610316575f80fd5b50565b5f8135905061032781610303565b92915050565b5f60208284031215610342576103416102fb565b5b5f61034f84828501610319565b91505092915050565b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6103a682610360565b810181811067ffffffffffffffff821117156103c5576103c4610370565b5b80604052505050565b5f6103d76102f2565b90506103e3828261039d565b919050565b5f67ffffffffffffffff82111561040257610401610370565b5b61040b82610360565b9050602081019050919050565b828183375f83830152505050565b5f610438610433846103e8565b6103ce565b9050828152602081018484840111156104545761045361035c565b5b61045f848285610418565b509392505050565b5f82601f83011261047b5761047a610358565b5b813561048b848260208601610426565b91505092915050565b5f80604083850312156104aa576104a96102fb565b5b5f83013567ffffffffffffffff8111156104c7576104c66102ff565b5b6104d385828601610467565b92505060206104e485828601610319565b9150509250929050565b5f60208284031215610503576105026102fb565b5b5f82013567ffffffffffffffff8111156105205761051f6102ff565b5b61052c84828501610467565b91505092915050565b5f81519050919050565b5f82825260208201905092915050565b5f5b8381101561056c578082015181840152602081019050610551565b5f8484015250505050565b5f61058182610535565b61058b818561053f565b935061059b81856020860161054f565b6105a481610360565b840191505092915050565b5f6040820190506105c25f8301856102ca565b81810360208301526105d48184610577565b90509392505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061062157607f821691505b602082108103610634576106336105dd565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026106967fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261065b565b6106a0868361065b565b95508019841693508086168417925050509392505050565b5f819050919050565b5f6106db6106d66106d1846102c1565b6106b8565b6102c1565b9050919050565b5f819050919050565b6106f4836106c1565b610708610700826106e2565b848454610667565b825550505050565b5f90565b61071c610710565b6107278184846106eb565b505050565b5b8181101561074a5761073f5f82610714565b60018101905061072d565b5050565b601f82111561078f576107608161063a565b6107698461064c565b81016020851015610778578190505b61078c6107848561064c565b83018261072c565b50505b505050565b5f82821c905092915050565b5f6107af5f1984600802610794565b1980831691505092915050565b5f6107c783836107a0565b9150826002028217905092915050565b6107e082610535565b67ffffffffffffffff8111156107f9576107f8610370565b5b610803825461060a565b61080e82828561074e565b5f60209050601f83116001811461083f575f841561082d578287015190505b61083785826107bc565b86555061089e565b601f19841661084d8661063a565b5f5b828110156108745784890151825560018201915060208501945060208101905061084f565b86831015610891578489015161088d601f8916826107a0565b8355505b6001600288020188555050505b505050505050565b5f81905092915050565b5f6108ba82610535565b6108c481856108a6565b93506108d481856020860161054f565b80840191505092915050565b5f6108eb82846108b0565b91508190509291505056fea2646970667358221220ec4a922147f2aab378793b7e223a37d73a665c37f0ae24892a913c1950ff41bf64736f6c63430008140033",
    //   chainId: 1337,
    // };

    // const signedTxResponse = await wallet.signTransaction(tx);
    // console.log(signedTxResponse);
    // const sentTxResponse = await wallet.sendTransaction(tx);
    // await sentTxResponse.wait(1);
    // console.log(sentTxResponse);

    // console.log("Here is the deployment transaction: {transaction response}: ");
    // console.log(contract.deploymentReceipt); // is what you receive immediately after sending the transaction
    // const deploymentReceipt = await contract.deployTransaction(1); // wait for the transaction to be mined
    // console.log("Here is the deployment receipt:"); // is what you receive when you wait for the transaction to be mined
    // console.log(transactionReceipt);
}

main()
    .then(() => process.exit(0))
    .catch((error) => {
        console.error(error)
        process.exit(1)
    })

// synchronous [solidity]
// asynchronous [javascript]

// cooking
// Synchronous
// 1. Put popcorn in microwave -> Promise
// 2. Wait for popcorn to finish
// 3. Pour drinks for everyone

// Asynchronous
// 1. Put popcorn in the mircrowave
// 2. Pour drinks for everyone
// 3. Wait for popcorn to finish

// Promise
// Pending
// Fulfilled
// Rejected
